fit_gcki_ba_tot,
newdata = ba_newdata,
type = "response"
)
slope_newdata$hewa_predicted =
predict(
fit_hewa_slope,
newdata = slope_newdata,
type = "response"
)
ba_newdata = data.frame(seq(
ba_newdata = data.frame(seq(
ba_newdata = data.frame(ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n))
d
ba_newdata = data.frame(ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n))
slope_newdata$gcki_predicted =
predict(
fit_gcki_slope,
newdata = slope_newdata,
type = "response"
)
ba_newdata$gcki_predicted =
predict(
fit_gcki_ba_tot,
newdata = ba_newdata,
type = "response"
)
AIC(
fit_hewa_ba_tot,
fit_hewa_slope,
fit_hewa_both_additive,
fit_hewa_both_interactive)
AIC(
fit_gcki_ba_tot,
fit_gcki_slope,
fit_gcki_both_additive,
fit_gcki_both_interactive)
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
new_dat_all$pred_add = predict(
fit_gcki_both_additive,
newdata = new_dat_all,
type = "response")
z_gcki_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
# Presence/absence data, translucent points:
plot(
HEWA_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(hewa_predicted ~ slope, data = slope_newdata)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
HEWA_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(hewa_predicted ~ slope, data = slope_newdata)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
plot(
HEWA_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "HEWA presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(hewa_predicted ~ ba.tot, data = ba_newdata)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ ba.tot, data = ba_newdata)
lines(GCKI_predicted ~ ba.tot, data = ba_newdata)
lines(gcki_predicted ~ ba.tot, data = ba_newdata)
z_gcki_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
require(rgl)
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_hewa_add,
col = "steelblue",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_gcki_add,
col = "steelblue",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_gcki_add,
col = "blue",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_gcki_add,
col = "pink",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_gcki_add,
col = "magenta",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
contour(
x = ba.tot, y = slope,
z = z_gcki_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_hewa_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE, na.rm = TRUE)
new_dat_all$pred_add = predict(
fit_gcki_both_additive,
newdata = new_dat_all,
type = "response", na.rm = TRUE)
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
new_dat_int = expand.grid(
ba.tot = ba.tot,
slope = slope)
z_gcki_int = matrix(
new_dat_int$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
new_dat_int = expand.grid(
ba.ratio = ba.ratio,
slope = slope)
head(new_dat_all)
new_dat_all$pred_int = predict(
fit_gcki_both_interactive,
newdata = new_dat_all,
type = 'response')
z_gcki_int = matrix(
new_dat_int$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
contour(
x = ba.tot,
y = slope,
z = z_gcki_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
par(mfrow = c(2, 1))
contour(
x = ba.tot, y = slope,
z = z_gcki_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_gcki_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
par(mfrow = c(2, 1))
contour(
x = ba.tot, y = slope,
z = z_gcki_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_gcki_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
par(mfrow = c(2, 1))
contour(
x = ba.tot, y = slope,
z = z_gcki_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_gcki_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
par(mfrow = c(1, 2))
contour(
x = ba.tot, y = slope,
z = z_gcki_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_gcki_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
summary(fit_gcki_both_additive)
?nrow
?dim()
?subset()
knitr::opts_chunk$set(echo = TRUE)
adeile_dat = subset(species = 'Adeile')
adeile_dat = subset( data = dat_pen, species = 'Adeile')
adeile_dat
#Call the Palmer penguins data and create a data frame
dat_pen = data.frame(require(palmerpenguins))
#load in penguins
require(palmerpenguins)
adiele = subset(penguins, species == 'Adeile')
adiele
?summary
?mean
?sd
?plot
?hist
hist(penguins$flipper_length_mm, breaks = c(6))
hist(penguins$flipper_length_mm, breaks = c(20))
hist(penguins$flipper_length_mm, breaks = c(6))
hist(penguins$flipper_length_mm, breaks = c(10))
?boxplot
#First we will create a boxplot of the ginkgo petiole data.
boxplot(ginkgo$petiole)
#Now we will create a conditional boxplot of max_depth conditioned on the seeds_present column.
boxplot(ginkgo$max_depth ~ ginkgo$seeds_present)
?par
#load in penguins
require(palmerpenguins)
pegnuins
penguins
require(mfrow)
?dnorm
dnorm(ginkgo$max_width, mean = mean_mw, sd = sd_mw)
?dbinom
qnorm(0.9, size = 10, prob = 0.5)
qnorm(0.9, size = 20, prob = 0.5)
qnorm(0.1, size = 10, prob = 0.4)
qbinom(0.1, size = 10, prob = 0.4)
knitr::opts_chunk$set(echo = TRUE)
require(here)
dat_del = data.frame(read.csv(here('data', 'delomys.csv')))
summary(dat_del$body_length)
summary(dat_de$body_mass)
summary(dat_del$body_mass)
shapiro.test(dat_del$body_length)
shapiro.test(dat_del$body_mass)
plot(dat_del$body_mass ~ dat_del$body_length, main = 'Body Mass vs Body Length')
plot(dat_del$body_mass ~ dat_del$body_length, main = 'Body Mass vs Body Length')
```{r fig.width=5}
plot(dat_del$body_mass ~ dat_del$body_length, main = 'Body Mass vs Body Length')
plot(dat_del$body_mass ~ dat_del$body_length, main = 'Body Mass vs Body Length')
plot(dat_del$body_mass, dat_del$body_length, main = 'Body Mass vs Body Length', xlab = 'Body Mass', ylab = 'Body Length')
plot(dat_del$body_mass, dat_del$body_length, main = 'Body Mass vs Body Length', xlab = 'Body Mass', ylab = 'Body Length')
plot(dat_del$body_mass, dat_del$body_length, main = 'Body Mass vs Body Length', xlab = 'Body Mass', ylab = 'Body Length')
plot(dat_del$body_mass, dat_del$body_length, main = 'Body Mass vs Body Length', xlab = 'Body Mass', ylab = 'Body Length')
plot(dat_del$body_mass, dat_del$body_length, main = 'Body Mass vs Body Length', xlab = 'Body Mass', ylab = 'Body Length')
```{r fig.width=8} {fig.height=50}
plot(dat_del$body_mass, dat_del$body_length, main = 'Body Mass vs Body Length', xlab = 'Body Mass', ylab = 'Body Length')
plot(dat_del$body_mass, dat_del$body_length, main = 'Body Mass vs Body Length', xlab = 'Body Mass', ylab = 'Body Length')
plot(dat_del$body_mass, dat_del$body_length, main = 'Body Mass vs Body Length', xlab = 'Body Mass', ylab = 'Body Length')
plot(dat_del$body_mass, dat_del$body_length, main = 'Body Mass vs Body Length', xlab = 'Body Mass', ylab = 'Body Length')
plot(dat_del$body_mass, dat_del$body_length, main = 'Body Mass vs Body Length', xlab = 'Body Mass', ylab = 'Body Length')
par(mfrow = c(1, 2))
hist(dat_del$body_length, main = 'Body Length', xlab = 'Body Length')
hist(dat_del$body_mass, main = 'Body Mass', xlab = 'Body Mass')
shapiro.test(dat_del$body_length)
shapiro.test(dat_del$body_mass)
boxplot(dat_del$body_mass ~ dat_del$sex + binomial, main = 'Conditional Boxplot of Body Mass, Sex, and Species')
boxplot(dat_del$body_mass ~ dat_del$sex * binomial, main = 'Conditional Boxplot of Body Mass, Sex, and Species')
boxplot(dat_del$body_mass ~ dat_del$sex:binomial, main = 'Conditional Boxplot of Body Mass, Sex, and Species')
par(mfrow = c(3, 1))
boxplot(body_mass ~ sex, data = dat_del, main = 'Conditional Boxplot of Body Mass and Sex')
boxplot(body_mass ~ binomial, data = dat_del, main = 'Conditional Boxplot of Body Mass and Species')
par(mfrow = c(3, 1))
boxplot(body_mass ~ sex, data = dat_del, main = 'Conditional Boxplot of Body Mass and Sex')
par(mfrow = c(3, 1))
boxplot(body_mass ~ sex, data = dat_del, main = 'Conditional Boxplot of Body Mass and Sex')
boxplot(body_mass ~ binomial, data = dat_del, main = 'Conditional Boxplot of Body Mass and Species')
boxplot(body_mass ~ sex:binomial, data = dat_del, main = 'Conditional Boxplot of Body Mass, Sex, and Species')
par(mfrow = c(3, 1))
boxplot(body_mass ~ sex, data = dat_del, main = 'Conditional Boxplot of Body Mass and Sex')
boxplot(body_mass ~ binomial, data = dat_del, main = 'Conditional Boxplot of Body Mass and Species')
boxplot(body_mass ~ sex:binomial, data = dat_del, main = 'Conditional Boxplot of Body Mass, Sex, and Species')
par(mfrow = c(3, 1))
boxplot(body_mass ~ sex, data = dat_del, main = 'Conditional Boxplot of Body Mass and Sex')
boxplot(body_mass ~ binomial, data = dat_del, main = 'Conditional Boxplot of Body Mass and Species')
boxplot(body_mass ~ sex:binomial, data = dat_del, main = 'Conditional Boxplot of Body Mass, Sex, and Species')
fit_1 = lm(body_length ~ body_mass, data = dat_del)
/lm
?lm
?aov
fit_1 = lm(body_length ~ body_mass, data = dat_del)
fit_2 = lm(body_mass ~ sex, data = dat_del)
fit_3 = lm(body_mass ~ binomial, data = dat_del)
fit_4 = lm(body_mass ~ sex + binomial, data = dat_del)
fit_5 = lm(body_mass ~ sex * binomial, data = dat_del)
resids_1 = residuals(fit_1)
resids_2 = residuals(fit_2)
resids_3 = residuals(fit_3)
resids_4 = residuals(fit_4)
resids_5 = residuals(fit_5)
hist(resids_1)
hist(resids_1)
hist(resids_2)
hist(resids_3)
hist(resids_4)
hist(resids_5)
par(mfrow = c(2, 3))
hist(resids_1)
hist(resids_2)
hist(resids_3)
hist(resids_4)
hist(resids_5)
par(mfrow = c(2, 3))
hist(resids_1)
hist(resids_2)
hist(resids_3)
hist(resids_4)
hist(resids_5)
shapiro.test(fit_1)
shapiro.test(fit_1)
shapiro.test(resids_1)
shapiro.test(resids_2)
shapiro.test(resids_3)
shapiro.test(resids_4)
shapiro.test(resids_5)
knitr::kable(coef(summary(my_model_fit)))
knitr::opts_chunk$set(echo = TRUE)
knitr::kable(coef(summary(fit_1)))
require(here)
require(here)
dat_del = data.frame(read.csv(here('data', 'delomys.csv')))
fit_1 = lm(body_length ~ body_mass, data = dat_del)
fit_2 = lm(body_mass ~ sex, data = dat_del)
fit_3 = lm(body_mass ~ binomial, data = dat_del)
fit_4 = lm(body_mass ~ sex + binomial, data = dat_del)
fit_5 = lm(body_mass ~ sex * binomial, data = dat_del)
resids_1 = residuals(fit_1)
resids_2 = residuals(fit_2)
resids_3 = residuals(fit_3)
resids_4 = residuals(fit_4)
resids_5 = residuals(fit_5)
knitr::kable(coef(summary(fit_1)))
knitr::kable(coef(summary(fit_2)))
knitr::kable(coef(summary(fit_3)))
knitr::kable(coef(summary(fit_4)))
knitr::kable(coef(summary(fit_5)))
summary(fit_1)
knitr::kable(anova(fit_1))
knitr::kable(anova(fit_2))
knitr::kable(anova(fit_3))
knitr::kable(anova(fit_4))
knitr::kable(anova(fit_5))
summary(knitr::kable(anova(fit_3)))
shapiro.test(resids_4
knitr::kable(anova(fit_1))
knitr::kable(anova(fit_1))
knitr::kable(anova(fit_2))
knitr::kable(anova(fit_3))
knitr::kable(anova(fit_4))
knitr::kable(anova(fit_5))
AIC(fit_2)
fit_2 = lm(body_mass ~ sex, data = dat_del)
require(here)
dat_del = data.frame(read.csv(here('data', 'delomys.csv')))
fit_1 = lm(body_length ~ body_mass, data = dat_del)
fit_2 = lm(body_mass ~ sex, data = dat_del)
fit_3 = lm(body_mass ~ binomial, data = dat_del)
fit_4 = lm(body_mass ~ sex + binomial, data = dat_del)
fit_5 = lm(body_mass ~ sex * binomial, data = dat_del)
AIC(fit_2)
AIC(fit_3)
AIC(fit_4)
AIC(fit_5)
knitr::opts_chunk$set(echo = TRUE)
AIC(fit_2)
require(here)
dat_del = data.frame(read.csv(here('data', 'delomys.csv')))
fit_1 = lm(body_length ~ body_mass, data = dat_del)
fit_2 = lm(body_mass ~ sex, data = dat_del)
fit_3 = lm(body_mass ~ binomial, data = dat_del)
fit_4 = lm(body_mass ~ sex + binomial, data = dat_del)
fit_5 = lm(body_mass ~ sex * binomial, data = dat_del)
AIC(fit_2)
AIC(fit_3)
AIC(fit_4)
AIC(fit_5)
hist(resids_3)
resids_3 = residuals(fit_3)
resids_4 = residuals(fit_4)
hist(resids_3)
hist(resids_4)
knitr::opts_chunk$set(echo = TRUE)
require(here)
dat_del = data.frame(read.csv(here('data', 'delomys.csv')))
fit_1 = lm(body_length ~ body_mass, data = dat_del)
fit_2 = lm(body_mass ~ sex, data = dat_del)
fit_3 = lm(body_mass ~ binomial, data = dat_del)
fit_4 = lm(body_mass ~ sex + binomial, data = dat_del)
fit_5 = lm(body_mass ~ sex * binomial, data = dat_del)
knitr::kable(coef(summary(fit_1)))
knitr::kable(coef(summary(fit_1)))
knitr::kable(coef(summary(fit_2)))
knitr::kable(coef(summary(fit_2)))
knitr::kable(coef(summary(fit_3)))
knitr::kable(coef(summary(fit_3)))
knitr::kable(coef(summary(fit_4)))
knitr::kable(anova(fit_1))
knitr::kable(anova(fit_2))
knitr::kable(anova(fit_3))
knitr::kable(anova(fit_4))
knitr::kable(anova(fit_5))
AIC(fit_2)
AIC(fit_3)
AIC(fit_4)
AIC(fit_5)
