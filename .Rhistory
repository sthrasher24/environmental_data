tab_DBH = table(dat_FL$DBH_in)
tab_height = table(dat_FL$HeighttoTop_ft)
barplot(tab_prob, xlab = 'Probability of Failure', main = 'Probability of Failure of Trees')
barplot(tab_fail, xlab = 'Failure Standardized', main = 'Standardized Failure of Trees')
hist(tab_DBH, xlab = 'DBH (in)', main = 'Diameter of Breast Height', breaks = 5)
plot(HeighttoTop_ft ~ DBH_in, data = dat_FL, xlab = 'DBH (in)', ylab = 'Height of Tree (ft)', main = 'Tree Height vs Diameter Breast Height')
dat_whole = droplevels(subset(dat_FL, Failure_Standardized = 'Whole'))
dat_whole = droplevels(subset(dat_FL, Failure_Standardized = 'whole'))
dat_none = droplevels(subset(dat_FL, Failure_Standardized = 'none'))
ks.test(dat_whole$DBH_in, dat_none$DBH_in)
dat_whole = droplevels(subset(dat_FL, Failure_Standardized == "whole"))
dat_none = droplevels(subset(dat_FL, Failure_Standardized == "none"))
ks.test(dat_whole$DBH_in, dat_none$DBH_in)
cor.test(
dat_FL$HeighttoTop_ft,
dat_FL$DBH_in,
use='complete.obs',
method='spearman')
dat_FL$fail = factor(dat_FL$Failure_Standardized != "none")
levels(dat_FL$fail) = c("No Fail", "Fail")
fl_table_2 = table(
dat_FL$ProbabilityofFailure,
dat_FL$fail)
fl_table_2
chisq_fail = chisq.test(fl_table_2)
chisq_fail
round(chisq_fail$1, 1)
round(chisq_fail[1], 1)
chisq_fail
str(chisq_fail)
chisq_fail$residuals
require(palmerpenguins)
penguins
dat_pen = droplevels(subset(penguins, species != 'Gentoo'))
shapiro.test(dat_pen)
shapiro.test(dat_pen$species)
?shapiro.test
dat_pen = na.omit(droplevels(subset(penguins, species != 'Gentoo')))
shapiro.test(dat_pen$species)
shapiro.test(cat_rate)
dat_pen_s = dat_pen$species
shapiro.test(dat_pen_s)
require(nortest)
require(nortest)
?ad.test
install.packages(nortest)
install.packages("nortest")
?ad.test
??ad.test
ad.test(dat_pen_s)
?lillie.test
require(nortest)
ad.test(dat_pen_s)
?ad.test
ad.test(dat_pen$species)
dat_pen_s = dat_pen$flipper_length_mm
ad.test(dat_pen_s)
shapiro.test(dat_pen_s)
?shapiro.test
dat_adeile = na.omit(droplevels(subset(dat_pen, species != 'Chinstrap')))
dat_pen = na.omit(droplevels(subset(penguins, species != 'Gentoo')))
install.packages("nortest")
require(nortest)
require(palmerpenguins)
head(penguins)
dat_pen = na.omit(droplevels(subset(penguins, species != 'Gentoo')))
dat_pen_s = dat_pen$flipper_length_mm
shapiro.test(dat_pen_s)
dat_adeile = na.omit(droplevels(subset(dat_pen, species != 'Chinstrap')))
hist(dat_adeile)
hist(dat_adeile$flipper_length_mm)
hist(dat_chinstrap$flipper_length_mm)
dat_chinstrap = na.omit(droplevels(subset(dat_pen, species != 'Adiele')))
hist(dat_chinstrap$flipper_length_mm)
par(mfrow = c(1, 2))
hist(dat_adeile$flipper_length_mm)
hist(dat_chinstrap$flipper_length_mm)
hist(dat_adeile$flipper_length_mm, main = 'Adeile Flipper Lengths', xlab = 'Flipper Lengths')
hist(dat_chinstrap$flipper_length_mm, main = 'Chinstrap Flipper Lengths', xlab = 'Flipper Lengths')
?hist
hist(dat_adeile$flipper_length_mm, main = 'Adeile Flipper Lengths', xlab = 'Flipper Lengths', height = 5)
hist(dat_chinstrap$flipper_length_mm, main = 'Chinstrap Flipper Lengths', xlab = 'Flipper Lengths')
#par(mfrow = c(1, 2))
hist(dat_adeile$flipper_length_mm, main = 'Adeile Flipper Lengths', xlab = 'Flipper Lengths')
hist(dat_chinstrap$flipper_length_mm, main = 'Chinstrap Flipper Lengths', xlab = 'Flipper Lengths')
#par(mfrow = c(1, 2))
hist(dat_adeile$flipper_length_mm, main = 'Adeile Flipper Lengths', xlab = 'Flipper Lengths')
par(mfrow = c(1, 2))
hist(dat_adeile$flipper_length_mm, main = 'Adeile Flipper Lengths', xlab = 'Flipper Lengths')
hist(dat_chinstrap$flipper_length_mm, main = 'Chinstrap Flipper Lengths', xlab = 'Flipper Lengths')
?t.test
t.test(dat_adeile$flipper_length_mm ~ dat_chinstrap$flipper_length_mm, mu = 0)
, mu = 0
t.test(dat_adeile$flipper_length_mm ~ dat_chinstrap$flipper_length_mm)
t.test(dat_chinstrap$flipper_length_mm ~ dat_adeile$flipper_length_mm)
adeile = dat_adeile$flipper_length_mm
chin = dat_chinstrap$flipper_length_mm
t.test(chin ~ adeile)
t.test(dat_pen$flipper_length_mm ~ dat_pen$species, alternative = c('greater'))
t.test(dat_pen$flipper_length_mm ~ dat_pen$species, alternative = c('less'))
t.test(dat_pen$flipper_length_mm ~ dat_pen$species, alternative = c('greater'))
t.test(dat_pen$flipper_length_mm ~ dat_pen$species, alternative = c('greater'))
t.test(catrate$cat.rate, mu = 2/7)
catrate = read.csv(here("data", "catrate.csv"))
head(catrate)
hist(catrate$cat.rate, xlab = 'Reproduction Cat Rates',
main = 'Salamander Reproduction Catastrophic Rates')
cat_rate = catrate$cat.rate
shapiro.test(cat_rate)
head(catrate)
t.test(catrate$cat.rate, mu = 2/7)
wilcox.test(catrate$cat.rate, mu = 0.28)
catrate = read.csv(here("data", "catrate.csv"))
require(here)
catrate = read.csv(here("data", "catrate.csv"))
head(catrate)
hist(catrate$cat.rate, xlab = 'Reproduction Cat Rates',
main = 'Salamander Reproduction Catastrophic Rates')
cat_rate = catrate$cat.rate
shapiro.test(cat_rate)
head(catrate)
t.test(catrate$cat.rate, mu = 2/7)
wilcox.test(catrate$cat.rate, mu = 0.28)
ginkgo = data.frame(read.csv(here('data', 'ginkgo_data_2022')))
require(here)
ginkgo = data.frame(read.csv(here('data', 'ginkgo_data_2022')))
ginkgo = data.frame(read.csv(here('data', 'ginkgo_data_2022')))
ginkgo = data.frame(read.csv(here("data", "ginkgo_data_2022")))
ginkgo = data.frame(read.csv(here("data", "ginkgo_data_2022.csv")))
seed_site = data_frame(subset(select('seeds_present', 'site_id')))
seed_site = data.frame(subset(select('seeds_present', 'site_id')))
install.packages('dplyr')
seed_site = data.frame(subset(select('seeds_present', 'site_id')))
seed_site = data.frame(subset(select('seeds_present', 'site_id')))
?select
library(dplyr)
seed_site = data.frame(subset(select('seeds_present', 'site_id')))
?select
seed_site = data.frame(subset(select(c('seeds_present', 'site_id')))
seeds_present
seed_site = data.frame(subset(select(c('seeds_present')))
seeds_present
seed_site = data.frame(subset(select(c('seeds_present')))
site-id
seed_site = data.frame(subset(select(c('seeds_present')))
site_id
seed_site = data.frame(subset(select(c('seeds_present', 'site_id')))
?unique
f
?unique
boxplot(seeds_present ~ site_id, data = ginkgo, main = 'Doubly-Conditional Boxplot Species')
#conditional boxplots
boxplot(body_mass_g ~ species, data = penguins, main = 'Doubly-Conditional Boxplot Species')
#ANOVA tests
require(palmerpenguins)
#conditional boxplots
boxplot(body_mass_g ~ species, data = penguins, main = 'Doubly-Conditional Boxplot Species')
boxplot(seeds_present, data = ginkgo, main = 'Doubly-Conditional Boxplot Species')
boxplot(ginkgo$seeds_present, data = ginkgo, main = 'Doubly-Conditional Boxplot Species')
boxplot(seeds_present ~ max_width, data = ginkgo, main = 'Doubly-Conditional Boxplot Species')
boxplot(seeds_present ~ max_depth, data = ginkgo, main = 'Doubly-Conditional Boxplot Species')
boxplot(max_width ~ max_depth, data = ginkgo, main = 'Doubly-Conditional Boxplot Species')
?ls()
?ls()
rope = data.frame(read.csv(here))
rope = data.frame(read.csv(here('data', 'rope.csv')))
require(here)
rope = data.frame(read.csv(here('data', 'rope.csv')))
rope$rope.type = factor(rope$rope.type)
levels(rope$rope.type)
n_groups = sum(rop.type)
n_groups = sum(rope.type)
n_groups = sum(rope$rope.type)
n_obs = sum(rope)
n_groups = nrow(rope$rope.type)
levels(rope$rope.type)
length(levels(rope$rope.type))
View(rope)
n_obs = nrow(rope)
n_groups = length(levels(rope$rope.type))
ss_tot = sum(rope$rope.cut^2)
ss_tot = sum(rope$p.cut^2)
#residuals = observed - predicted
resid(rope$p.cut)
#residuals = observed - predicted
residp.cut)
#residuals = observed - predicted
resid(p.cut)
#residuals = observed - predicted
gmean = mean(p.cut)
#residuals = observed - predicted
gmean = mean(rope$p.cut)
resids = rope$p.cut - gmean
ss_tot = sum(resids^2)
?aggregate
df_tot =
agg_sum_sq_resids = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = mean)
agg_sum_sq_resids
df_tot =
agg_sum_sq_resids = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) mean(x))
agg_sum_sq_resids
df_tot = n_obs - 1
agg_resids = gmean - aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) mean(x))
agg_resids = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) mean(x)) - gmean
agg_resids = data.frame(aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) mean(x))) - gmean
agg_resids = data.frame(aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) mean(x)) - gmean)
agg_resids = data.frame(aggregate(x = rope$p.cut - gmean, by = list(rope$rope.type), FUN = function(x) mean(x)))
agg_resids
test_agg = aggregate(x = rope$p.cut, by = list(rope$rope.type))
agg_resids = data.frame(aggregate(x = rope$p.cut - gmean, by = list(rope$rope.type)))
test_agg = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) mean(x))
test_agg
agg_resids = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) x - mean(x))
agg_resids
str(agg_resids)
ss_within = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) sum(x - mean(x))^2)
str(ss_within)
ss_within = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) sum(agg_resids))^2)
ss_within = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) sum(agg_resids)^2)
ss_within = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) sum x - mean(x)^2)
ss_within = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) sum(x) - mean(x)^2)
str(ss_within)
ss_within = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) sum((x) - mean(x)^2))
str(ss_within)
ss_within = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) sum((x - mean(x))^2))
str(ss_within)
df_within = n_obs - 2
ss_among = ss_tot - ss_within
df_among = df_within
?diff
ss_among = ss_tot - ss_within
View(ss_within)
agg_sum_sq_resids = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) sum((x - mean(x))^2))
str(agg_sum_sq_resids)
agg_sum_sq_resids = sum(ss_within$x)
agg_sum_sq_resids
ss_among = ss_tot - agg_sum_sq_resids
ss_among
df_within = n_obs - 6
df_among = n_obs - 5
ms_within = ss_among / (n_groups - 1)
ms_within =
ms_among  = ss_among / (n_groups - 1)
ms_within = ss_within / (n_obs - n_groups)
ms_within = agg_sum_sq_resids / (n_obs - n_groups)
ms_within
ms_among
df_among = 6 - 1
ms_within = agg_sum_sq_resids / (n_obs - n_groups)
ms_within
ms_among  = ss_among / (n_groups - 1)
ms_among
?pf()
f_ratio = ss_among / agg_sum_sq_resids
f_ratio = ms_among / ms_within
f_ratio
f_pval = pf(ms_among / ms_within)
f_pval = pf(ms_among / ms_within, df1 = 5)
f_pval = pf(ms_among / ms_within, df1 = 5, df2 = 115)
f_pval = pf(f_ratio, df_among, df_within)
f_pval = 1 - pf(f_ratio, df_among, df_within)
f_pval
?bartlett.test
bart_test = bartlett.test(rope$p.cut ~ rope$rope_type, data = rope)
bart_test = bartlett.test(rope$p.cut ~ rope$rope_type, rope)
bart_test = bartlett.test(p.cut ~ rope_type, rope)
bart_test = bartlett.test(p.cut ~ rope.type, rope)
bart_test
#boxplot
boxplot(
p.cut ~ rope.type,
data = rope,
las = 2,
xlab = "",
ylab = "Proportion Rope Cut",
main = "Subset of Rope Data")
#boxplot
boxplot(
p.cut ~ rope.type,
data = rope,
las = 2,
xlab = "Rope Type",
ylab = "Proportion Rope Cut",
main = "Subset of Rope Data")
bart_test
fit_rope_1 = lm(p.cut ~ rope.type, data = rope)
summary(fit_rope_1)
residuals(agg_sum_sq_resids)
residuals(fit_rope_1)
residuals(agg_resids)
residuals(fit_rope_1)
resids_rope = shapiro.test(residuals(fit_rope_1))
resids_rope
resids_rope = shapiro.test(residuals(agg_resids))
resids_rope = shapiro.test(residuals(fir_rope_1))
resids_groups = shaprio.test(residuals(rope_type))
resids_groups = shapiro.test(residuals(rope_type))
resids_groups = shapiro.test(residuals(rope$rope_type))
resids_groups = shapiro.test(residuals(rope$p.cut ~ rope$rope_type))
shapiro.test(residuals(rope$p.cut ~ rope$rope_type))
?shapiro.test
?residuals
resids_rope = shapiro.test(residuals(fit_rope_1))
resids_rope
str(agg_resids)
resids_groups = shapiro.test(agg_resids$x))
resids_groups = shapiro.test(
agg_resids$x)
agg_resids$x
resids_groups = shapiro.test(
agg_resids$x[[1]])
?sapply
sapply(agg_resids$x, shapiro.test)
resids_groups = sapply(agg_resids$x, shapiro.test)
rope$rope.type = factor(rope$rope.type)
n_groups = length(levels(rope$rope.type))
require(palmerpenguins)
resids_norm = shapiro.test(residuals(fit_rope_1))
require(palmerpenguins)
pen_fem = subset(penguins, sex == "female")
boxplot(body_mass_g ~ sex, penguins)
boxplot(body_mass_g ~ species, pen_fem)
boxplot(body_mass_g ~ species, pen_fem, xlab = 'Species', main = 'Condtional Boxplot of Penguins')
bartlett.test(body_mass_g ~ species, pen_fem)
lm(body_mass_g ~ species, data = fem_pen)
lm(body_mass_g ~ species, data = pen_fem)
shapiro.test(residuals(fit_pen))
fit_pen = lm(body_mass_g ~ species, data = pen_fem)
shapiro.test(residuals(fit_pen))
?select
seed_site = data.frame(subset(select(c('seeds_present' 'site_id')))
seed_site = data.frame(subset(select(c('seeds_present','site_id')))
seed_site = data.frame(subset(select(c('seeds_present','site_id')))
seed_site = subset(ginkgo, select= c('seeds_present','site_id'))
require(here)
ginkgo = data.frame(read.csv(here("data", "ginkgo_data_2022.csv")))
install.packages('dplyr')
library(dplyr)
seed_site = subset(ginkgo, select= c('seeds_present','site_id'))
View(seed_site)
seed_site
unique(seed_site$site_id)
trees = length(unique(seed_site$site_id))
seeds = seeds_site$seeds_present > 0
seeds = seed_site$seeds_present > 0
seeds = seed_site$seeds_present > 0 == TRUE
seed_site$seeds_present > 0 == TRUE
seed_site$seeds_present > 0
boxplot(max_width ~ max_depth, data = ginkgo, main = 'Doubly-Conditional Boxplot Species')
boxplot(seeds_present ~ max_depth, data = ginkgo, main = 'Doubly-Conditional Boxplot Species')
?boxplot
boxplot(max_depth ~ sees_present, data = ginkgo, main = 'Doubly-Conditional Boxplot Species')
boxplot(max_depth ~ seeds_present, data = ginkgo, main = 'Doubly-Conditional Boxplot Species')
boxplot(max_depth ~ seeds_present, data = ginkgo, main = 'Doubly-Conditional Boxplot Species', names = c('no seeds', 'seeds'))
seed = length(unique(seed_site$seeds_present))
?unique
seed = length(unique(ginkgo$seed_id, ginkgo$seeds_present))
seed = (ginkgo$seed_id, ginkgo$seeds_present)
seed = data.frame(ginkgo$seed_id, ginkgo$seeds_present)
length(length(nrow(seed)))
unique(subset(nrow(seed)))
seed = sum(ginkgo$seeds_present)/10
seed
require(palmerpenguins)
pen_fem = subset(penguins, sex == "female")
fit_pen = lm(body_mass_g ~ species, data = pen_fem)
shapiro.test(residuals(fit_pen))
pen_hsd = TuckeyHSD(aov(fit_pen))
pen_hsd = TukeyHSD(aov(fit_pen))
pen_hsd
round(pen_hsd$body_mass_g, digits = 4)
round(pen_hsd$species, digits = 4)
require(here)
rm(list = ls())
rope = data.frame(read.csv(here('data', 'rope.csv')))
rope$rope.type = factor(rope$rope.type)
n_obs = nrow(rope)
n_groups = length(levels(rope$rope.type))
#residuals = observed - predicted
gmean = mean(rope$p.cut)
resids = rope$p.cut - gmean
ss_tot = sum(resids^2)
df_tot = n_obs - 1
test_agg = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) mean(x))
test_agg
agg_resids = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) x - mean(x))
str(agg_resids)
ss_within = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) sum((x - mean(x))^2))
str(ss_within)
agg_sum_sq_resids = sum(ss_within$x)
agg_sum_sq_resids
df_within = n_obs - 6
ss_among = ss_tot - agg_sum_sq_resids
ss_among
df_among = 6 - 1
ms_within = agg_sum_sq_resids / (n_obs - n_groups)
ms_within
ms_among  = ss_among / (n_groups - 1)
ms_among
f_ratio = ms_among / ms_within
f_ratio
f_pval = 1 - pf(f_ratio, df_among, df_within)
f_pval
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
agg_sum_sq_resids = sum(ss_within$x)
agg_sum_sq_resids
str(ss_within)
agg_sum_sq_resids = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) sum((x - mean(x))^2))
str(agg_sum_sq_resids)
ss_within = sum(ss_within$x)
ss_within
ss_within = sum(agg_sum_sq_resids$x)
ss_within
agg_sum_sq_resids = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) sum((x - mean(x))^2))
str(agg_sum_sq_resids)
ss_within = sum(agg_sum_sq_resids$x)
ss_within
#sum squares among
ss_among = ss_tot - ss_within
require(here)
#question 1
rm(list = ls())
rope = data.frame(read.csv(here('data', 'rope.csv')))
rope$rope.type = factor(rope$rope.type)
n_obs = nrow(rope)
n_groups = length(levels(rope$rope.type))
#residuals = observed - predicted
#sum of squares total
gmean = mean(rope$p.cut)
resids = rope$p.cut - gmean
ss_tot = sum(resids^2)
df_tot = n_obs - 1
#sum squares within
test_agg = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) mean(x))
test_agg
agg_resids = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) x - mean(x))
str(agg_resids)
agg_sum_sq_resids = aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = function(x) sum((x - mean(x))^2))
str(agg_sum_sq_resids)
ss_within = sum(agg_sum_sq_resids$x)
ss_within
df_within = n_obs - 6
#sum squares among
ss_among = ss_tot - ss_within
ss_among
df_among = 6 - 1
ms_within = ss_within / (n_obs - n_groups)
ms_within
ms_among  = ss_among / (n_groups - 1)
ms_among
f_ratio = ms_among / ms_within
f_ratio
f_pval = 1 - pf(f_ratio, df_among, df_within)
f_pval
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
# Check mean squares
round(anova_fit_1$`Mean Sq`, digits = digits_check) == round(c(ms_among, ms_within), digits = digits_check)
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
# Check the F test statistic p-value
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
#load in penguins
require(palmerpenguins)
#create conditional boxplot
boxplot(body_mass_g ~ species, data = penguins)
boxplot(body_mass_g ~ sex:species, data = penguins,
main = 'Doubly-Conditional Boxplot Species',
names = c('Adelie F', 'Adelie M', 'Chinstrap \n Female', 'Chinstrap \n Male', 'Gentoo F', 'Gentoo M'),
las = 3, xlab = '')
boxplot(body_mass_g ~ sex:species, data = penguins,
ylab = 'Body Mass (g)'
main = 'Doubly-Conditional Boxplot Species',
boxplot(body_mass_g ~ sex:species, data = penguins,
ylab = 'Body Mass (g)',
main = 'Doubly-Conditional Boxplot Species',
names = c('Adelie F', 'Adelie M', 'Chinstrap \n Female', 'Chinstrap \n Male', 'Gentoo F', 'Gentoo M'),
las = 3, xlab = '')
boxplot(body_mass_g ~ species, data = penguins, main = 'Doubly-Conditional Boxplot Species')
#create conditional boxplot
boxplot(body_mass_g ~ species, data = penguins)
#fit a linear model
fit_additive = lm(body_mass_g ~ sex + species, data = penguins)
fit_additive
#fit a linear model
fit_both = lm(body_mass_g ~ sex + species, data = penguins)
fit_both
summary(fit_both)
#fit a linear model
fit_both = lm(body_mass_g ~ sex + species, data = penguins)
summary(fit_both)
#fit a linear model
fit_both = lm(body_mass_g ~ sex * species, data = penguins)
summary(fit_both)
?aggregate
